**Используемые технологии:**

1. **Python:**
   - **Описание:** Основной язык программирования для реализации бота и предсказательной системы. Python является удобным и гибким языком, который широко используется в разработке ботов и обработке данных.

2. **pandas:**
   - **Описание:** Библиотека для обработки и анализа данных. В проекте pandas используется для загрузки данных из файлов CSV, представляющих собой колоды Таро для разных категорий.

3. **numpy:**
   - **Описание:** Библиотека для работы с многомерными массивами и выполнения математических операций. В данном контексте numpy используется для выбора случайных элементов из текстовых данных.

4. **telebot:**
   - **Описание:** Библиотека для создания телеграм-ботов на языке Python. Telebot предоставляет удобный интерфейс для взаимодействия с API Telegram, обеспечивая прием и отправку сообщений.

5. **pyTelegramBotAPI:**
   - **Описание:** Ещё одна библиотека для создания телеграм-ботов на Python. PyTelegramBotAPI также обеспечивает простой способ взаимодействия с API Telegram.

6. **random:**
   - **Описание:** Встроенная библиотека Python, используемая для генерации случайных элементов. В проекте random используется для выбора случайных карт из колоды.

7. **Технологии эмодзи:**
   - **Описание:** Для добавления эмоционального элемента в предсказания используется набор эмодзи. Эмодзи выбираются случайным образом из предопределенного списка.

8. **GitHub:**
   - **Описание:** Платформа для хостинга и управления версиями кода. GitHub используется для хранения и отслеживания изменений в исходном коде проекта.

9. **Jupyter Notebook (опционально):**
   - **Описание:** Используется для проведения анализа данных и тестирования кода. Jupyter Notebook обеспечивает интерактивную среду для разработки и визуализации данных.

**Примечание:**
Данные технологии были выбраны исходя из их удобства, популярности в сфере разработки ботов и анализа данных, а также для обеспечения эффективной работы с API Telegram.

Конечно, давайте перепишем документацию с подробным описанием классов и методов:

---

**Класс `TarotDeck`**

**Описание:**
Класс `TarotDeck` представляет собой модель колоды Таро и предоставляет методы для выбора конкретной категории карт. Этот класс используется в телеграм-боте для обработки запросов пользователей.

**Параметры:**
- `message` (строка): Категория Таро, выбранная пользователем.

**Атрибуты:**
- `message` (строка): Хранит выбранную категорию Таро.
- `tr` (pandas.DataFrame): Хранит данные из файла CSV для выбранной категории, представляющие собой таблицу с предсказаниями и картами.

**Методы:**
1. `__init__(self, message)`: Инициализирует объект `TarotDeck`, сохраняя переданную категорию.
2. `choose_category(self) -> pandas.DataFrame`: Выбирает категорию Таро в соответствии с введенным пользователем сообщением и возвращает данные из файла CSV для этой категории в виде pandas.DataFrame.

---

**Класс `TarotPrediction`**

**Описание:**
Класс `TarotPrediction` используется для генерации предсказаний на основе выбранной категории Таро и случайно выбранных карт. Этот класс также используется в телеграм-боте для предоставления пользователям интригующих предсказаний.

**Параметры:**
- `message` (строка): Категория Таро, выбранная пользователем.

**Атрибуты:**
- `message` (строка): Хранит выбранную категорию Таро.
- `text` (строка): Хранит текст карт, который будет использован для генерации предсказания.
- `names` (строка): Хранит названия выбранных карт.
- `pred` (строка): Хранит сгенерированное предсказание.

**Методы:**
1. `__init__(self, message)`: Инициализирует объект `TarotPrediction` и вызывает инициализацию родительского класса `TarotDeck`.
2. `random_cards(self) -> Tuple[str, str]`: Выбирает случайные карты из колоды Таро и возвращает текст и названия выбранных карт.
3. `write_names(self) -> str`: Возвращает строку с названиями выбранных карт.
4. `make_pred(self) -> str`: Генерирует предсказание на основе текста карт и эмодзи и возвращает сгенерированное предсказание.
5. `random_emoji() -> str`: Возвращает случайную последовательность эмодзи для украшения предсказания.

---

**Метод `random_emoji()`**

**Описание:**
Метод `random_emoji()` используется для генерации случайной последовательности эмодзи, которая будет добавлена к предсказаниям. Эмодзи выбираются случайным образом из заранее определенного списка.

**Возвращает:**
- `str`: Случайная последовательность эмодзи.

---

**Использование в телеграм-боте:**
1. Бот предоставляет пользователю клавиатуру с категориями Таро при старте.
2. При выборе категории создается объект `TarotDeck`, который загружает соответствующую колоду Таро.
3. Затем создается объект `TarotPrediction`, который использует данные из `TarotDeck` для генерации предсказания.
4. Результаты выводятся в чат бота для удовлетворения любопытства пользователей.



```python
import telebot
from telebot import types
from gen_predict import TarotDeck, TarotPrediction

token = "token"
bot = telebot.TeleBot(token)
```

1. **Импорт библиотек и настройка токена:**
   - `telebot`: Импортируется библиотека для работы с Telegram API.
   - `types`: Импортируется модуль для работы с типами данных библиотеки telebot.
   - `gen_predict`: Импортируется модуль с определенными классами `TarotDeck` и `TarotPrediction`.
   - `token`: Хранит токен Telegram-бота для аутентификации.

```python
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Общее")
    btn2 = types.KeyboardButton("Здоровье")
    btn3 = types.KeyboardButton("Прошлое, настоящее, будущее")
    btn4 = types.KeyboardButton("Любовь")
    btn5 = types.KeyboardButton("Карьера, деньги")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, "Привет, {0.first_name}! Таро подружка приветствует тебя! Выбери, какой раскладик ты хочешь?".format(message.from_user), reply_markup=markup)
```

2. **Обработчик команды `/start`:**
   - Создается объект клавиатуры (`markup`) с категориями Таро.
   - Определяются кнопки для каждой категории.
   - Отправляется приветственное сообщение с выбором категории пользователю.

```python
@bot.message_handler(content_types=['text'])
def func(message):
    prediction = TarotPrediction(message.text)
    if prediction.choose_category() is not None:
        prediction.choose_category()
        prediction.random_cards()
        bot.send_message(message.chat.id, text=prediction.write_names())
        bot.send_message(message.chat.id, text=prediction.make_pred())
    else:
        bot.send_message(message.chat.id, "Ты точно хочешь раскладик?")

bot.polling(none_stop=True)
```

3. **Обработчик текстовых сообщений:**
   - Создается объект `TarotPrediction` для обработки запроса пользователя.
   - Проверяется, что выбранная категория существует.
   - Если категория существует, вызываются методы для генерации предсказания и отправки сообщений с результатами.
   - В противном случае отправляется сообщение с предупреждением.
